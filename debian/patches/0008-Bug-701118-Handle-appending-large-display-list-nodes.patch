From: Sebastian Rasmussen <sebras@gmail.com>
Date: Sat, 1 Jun 2019 12:26:31 +0200
Subject: Bug 701118: Handle appending large display list nodes.

The size of the begin layer node depends on the size of the layer
name. That name may be a string from the page's property resources,
and is only bounded by memory when parsed by lex_string(). So the
append_list_node() logic cannot simply double the size of the
display list and hope that the node fits, since the node may be
of arbitrary size.

Now append_list_node() would repeatedly double the size of the
display list until the node fits, or malloc() runs out of memory.
---
 source/fitz/list-device.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/fitz/list-device.c b/source/fitz/list-device.c
index d4936b0..9440551 100644
--- a/source/fitz/list-device.c
+++ b/source/fitz/list-device.c
@@ -466,7 +466,7 @@ fz_append_display_node(
 		size += SIZE_IN_NODES(private_data_len);
 	}
 
-	if (list->len + size > list->max)
+	while (list->len + size > list->max)
 	{
 		int newsize = list->max * 2;
 		fz_display_node *old = list->list;
