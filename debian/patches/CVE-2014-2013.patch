From 60dabde18d7fe12b19da8b509bdfee9cc886aafc Mon Sep 17 00:00:00 2001
From: =?utf8?q?Simon=20B=C3=BCnzli?= <zeniko@gmail.com>
Date: Thu, 16 Jan 2014 22:04:51 +0100
Subject: [PATCH] Bug 694957: fix stack buffer overflow in xps_parse_color
MIME-Version: 1.0
Content-Type: text/plain; charset=utf8
Content-Transfer-Encoding: 8bit

xps_parse_color happily reads more than FZ_MAX_COLORS values out of a
ContextColor array which overflows the passed in samples array.
Limiting the number of allowed samples to FZ_MAX_COLORS and make sure
to use that constant for all callers fixes the problem.

Thanks to Jean-Jamil KhalifÃ© for reporting and investigating the issue
and providing a sample exploit file.
---
 xps/xps_common.c   |    7 ++++++-
 xps/xps_glyphs.c   |    2 +-
 xps/xps_gradient.c |    2 +-
 xps/xps_path.c     |    2 +-
 4 files changed, 9 insertions(+), 4 deletions(-)

--- a/xps/xps_common.c
+++ b/xps/xps_common.c
@@ -60,7 +60,7 @@
 		if (scb_color_att)
 		{
 			fz_colorspace *colorspace;
-			float samples[32];
+			float samples[FZ_MAX_COLORS];
 			xps_parse_color(ctx, base_uri, scb_color_att, &colorspace, samples);
 			opacity = opacity * samples[0];
 		}
@@ -245,6 +245,11 @@
 		*p++ = 0;
 		n = count_commas(p) + 1;
 		i = 0;
+		if (n > FZ_MAX_COLORS)
+		{
+			fz_warn("ignoring %d color components (max %d allowed)", n - FZ_MAX_COLORS, FZ_MAX_COLORS);
+			n = FZ_MAX_COLORS;
+		}
 		while (i < n)
 		{
 			samples[i++] = fz_atof(p);
--- a/xps/xps_glyphs.c
+++ b/xps/xps_glyphs.c
@@ -552,7 +552,7 @@
 
 	if (fill_att)
 	{
-		float samples[32];
+		float samples[FZ_MAX_COLORS];
 		fz_colorspace *colorspace;
 
 		xps_parse_color(ctx, base_uri, fill_att, &colorspace, samples);
--- a/xps/xps_gradient.c
+++ b/xps/xps_gradient.c
@@ -39,7 +39,7 @@
 	struct stop *stops, int maxcount)
 {
 	fz_colorspace *colorspace;
-	float sample[8];
+	float sample[FZ_MAX_COLORS];
 	float rgb[3];
 	int before, after;
 	int count;
--- a/xps/xps_path.c
+++ b/xps/xps_path.c
@@ -805,7 +805,7 @@
 
 	fz_stroke_state stroke;
 	fz_matrix transform;
-	float samples[32];
+	float samples[FZ_MAX_COLORS];
 	fz_colorspace *colorspace;
 	fz_path *path;
 	fz_rect area;
